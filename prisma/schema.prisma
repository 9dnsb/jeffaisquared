generator client {
  provider   = "prisma-client-js"
  output     = "../src/generated/prisma"
  engineType = "library"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id        String   @id @db.Uuid
  email     String   @unique
  firstName String?  @map("first_name")
  lastName  String?  @map("last_name")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("profiles")
}

model Category {
  id               String   @id @default(cuid())
  squareCategoryId String   @unique
  name             String
  isActive         Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  items            Item[]

  @@map("categories")
}

model Location {
  id                String     @id @default(cuid())
  squareLocationId  String     @unique
  name              String
  address           String?
  timezone          String?
  currency          String?
  status            String?
  businessHours     Json?
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  orders            Order[]

  @@map("locations")
}

model Item {
  id               String      @id @default(cuid())
  squareItemId     String      @unique
  squareCatalogId  String      @unique
  squareCategoryId String?
  name             String
  category         String?
  isActive         Boolean     @default(true)
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  categoryRel      Category?   @relation(fields: [squareCategoryId], references: [squareCategoryId])
  lineItems        LineItem[]

  @@map("items")
}

model Order {
  id              String     @id @default(cuid())
  squareOrderId   String     @unique
  locationId      String
  date            DateTime
  state           String
  totalAmount     Int        // Amount in cents
  currency        String
  version         Int?
  source          String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  location        Location   @relation(fields: [locationId], references: [squareLocationId])
  lineItems       LineItem[]

  @@map("orders")
}

model LineItem {
  id                   String   @id @default(cuid())
  squareLineItemUid    String   @unique
  orderId              String
  itemId               String?
  name                 String
  quantity             Int
  unitPriceAmount      Int      // Amount in cents
  totalPriceAmount     Int      // Amount in cents
  currency             String
  taxAmount            Int      @default(0)
  discountAmount       Int      @default(0)
  variations           String?
  category             String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  order                Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  item                 Item?    @relation(fields: [itemId], references: [id])

  @@map("line_items")
}

model Conversation {
  id        String        @id @default(cuid())
  userId    String        @map("user_id")
  title     String?
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")
  messages  ChatMessage[]

  @@map("conversations")
}

model ChatMessage {
  id             String       @id @default(cuid())
  conversationId String       @map("conversation_id")
  role           String
  content        String
  metadata       Json?
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
}
